/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Mathias' at '29.01.16 18:29' with Gradle 2.9
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Eclipse-Support
    id 'eclipse'

    // Provides a class (or multiple) containing constants (public static final)
    // defined in the buildscript and available in the project. It can contain
    // simple infos like application name or version but also input from other
    // plugins like subversion commit number or git commit hash.
    // Die zugehörige Task lautet "generateBuildConfig"
    // https://github.com/mfuerstenau/gradle-buildconfig-plugin
    id 'de.fuerstenau.buildconfig' version '1.1.8'
    
    // Shadow is a Gradle plugin for combining dependency classes and resources
    // with a project�s into a single output Jar. The combined Jar is often
    // referred to a fat-jar or uber-jar. Shadow utilizes JarInputStream and
    // JarOutputStream to efficiently process dependent libraries into the
    // output jar without incurring the I/O overhead of expanding the jars to
    // disk.
    // http://imperceptiblethoughts.com/shadow/
//    id 'com.github.johnrengelman.shadow' version '2.0.0'
    id "com.github.johnrengelman.shadow" version "1.2.4"

    // The gradle-launch4j plugin uses launch4j to create windows .exe files
    // for java applications.
    // https://github.com/TheBoegl/gradle-launch4j
    id 'edu.sc.seis.launch4j' version '2.3.0'

    // https://github.com/researchgate/gradle-release
    // Dieses Plugin setzt voraus, dass Git im Pfad eingetragen ist!
    id 'net.researchgate.release' version '2.4.0'

    // Gradle plugin for generating a changelog based on a Git commit history.
    // https://github.com/tomasbjerre/git-changelog-gradle-plugin
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.40"
    
    // SSH
    // https://gradle-ssh-plugin.github.io/
    id 'org.hidetake.ssh' version '2.8.0'

}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    //mavenCentral()
    maven {
        url 'http://jasperreports.sourceforge.net/maven2'
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // Abhängigkeiten zur Compile-Zeit:
    compile 'log4j:log4j:1.2.17'
    compile 'commons-lang:commons-lang:2.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.10'
    compile 'commons-net:commons-net:3.4'
    compile 'org.apache.commons:commons-vfs2:2.0'
    compile 'com.jgoodies:jgoodies-forms:1.9.0'
    compile 'org.jdatepicker:jdatepicker:1.3.4'
    compile 'net.sourceforge.dynamicreports:dynamicreports-core:5.0.0'

    // Die Library jupidator.jar ist leider nicht in einem Repository verfügbar.
    compile fileTree(dir: 'libs', include: ['*.jar'])

    runtime 'com.jcraft:jsch:0.1.53'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
// ############################################################################

// ############################################################################
// Allgemeine Definitionen
String  copyRight   = '(C) 2014-2020 TeamBaltic'
String mainClass = 'teambaltic.adhelper.gui.ADH_Application'
String TASKGROUP_JUPIDATOR = "Jupidator"
def (pv) = project.version.split('-')
def (v1, v2, v3) =  pv.split('\\.')
String releaseNum  = (v3 as int) + 1000* ( (v2 as int) + 1000*(v1 as int) )
File changeLog              = project.file('build/resources/main/CHANGELOG.html')
File releaseNotes           = project.file('RELEASENOTES.txt')
File releaseNotesActual     = project.file('misc/build-res/ReleaseNotes-actual.txt')
File distributionFolderRoot = project.file("Releases")
File distributionFolder     = project.file(distributionFolderRoot.toString() + "/$releaseNum")
File documentation          = project.file("misc/Dokumentation/Dokumentation.txt")
def jupidatorProps = [
    basename                : 'releases',
    filename                : 'releases.xml',
    version                 : project.version,
    releaseNum              : releaseNum,
    urlroot                 : "http://syniphos.i234.me/~kvk/Download/${project.name}",
    distributionFolderRoot  : distributionFolderRoot,
    distributionFolder      : distributionFolder,
    releaseNotesActual      : releaseNotesActual
]
// ############################################################################

// ############################################################################
task gitChangelogTask(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    filePath = changeLog.toString();
    templateContent = project.file('misc/build-res/changelog.html.template').getText('UTF-8');
}

task exec_gitChangelogTask(type:Exec){
    workingDir projectDir
    commandLine 'cmd', '/c', 'gradlew.bat', 'gitChangelogTask'
}
configure(exec_gitChangelogTask) {
    description = 'Ausführen der gitChangelogTask über eine DOS-Shell'
}

// gitChangelogTask kann nicht direkt aus Eclipse heraus ausgeführt werden,
// weil versucht wird im "working directory" ein GIT-Repository zu finden.
// Das "working directory" ist dann aber "C:\Program Files\eclipse\..."
// Also wird hier je nachdem, wie gradle aufgerufen wurde, die Task entweder
// direkt ausgeführt, oder in einer Command-Shell, deren "working directory"
// auf das aktuelle Projekt-Verzeichnis gesetzt wird.
task do_gitChangelogTask{
}
do_gitChangelogTask.dependsOn{
    if( System.getProperty("user.dir") == projectDir ){
        gitChangelogTask
    } else {
        exec_gitChangelogTask
    }
}
configure(do_gitChangelogTask) {
    description = 'Ausführen der gitChangelogTask direkt oder über eine DOS-Shell'
}

// ############################################################################

// ############################################################################
// 
// id 'de.fuerstenau.buildconfig' version '1.1.7'
// Die erzeugte Datei steht unter build/gen/buildconfig/src/main
buildConfig {
    appName = project.name       // sets value of NAME field
    version = project.version    // sets value of VERSION field,
    clsName = 'BuildConfig'      // sets the name of the BuildConfig class
    packageName = "teambaltic"   // sets the package of the BuildConfig class,
    charset = 'UTF-8'            // sets charset of the generated class,

    buildConfigField 'String',  'COPYRIGHT',    copyRight
    buildConfigField 'int',     'RELEASE',      releaseNum
    buildConfigField 'String',  'URL_FOR_FILEWITH_JUPIDATORURL', 'https://raw.githubusercontent.com/baltic-mh/ADHelper/master/Update.url'

}
// ############################################################################

// ############################################################################
jar {
    manifest {
        attributes 'Main-Class': mainClass
    }
}

createExe {
    outfile = "${project.name}.exe"
    mainClassName = mainClass
    headerType = "gui"
    icon = project.file("misc/build-res/ADHelper.ico")
    copyConfigurable = project.tasks.shadowJar.outputs.files
    jar = "lib/${project.tasks.shadowJar.archiveName}"
    copyright = copyRight
}
// ############################################################################

// ############################################################################
// ReleaseNotes aktualisieren
task updateReleaseNotes << {
    
    def aRNU = new ReleaseNotesUpdater(
        version             : project.version,
        releaseNum          : releaseNum,
        releaseNotes        : releaseNotes,
        releaseNotesActual  : releaseNotesActual
    )
    if( aRNU.process() != 0 ){
        throw new GradleException('ReleaseNotesUpdater.process ging schief!')
    }
}
configure(updateReleaseNotes) {
    group = TASKGROUP_JUPIDATOR
    description = 'Schreibt den Inhalt der Datei "ReleaseNotes-actual.txt" in die Datei "RELEASENOTES.txt"'
    outputs.file    releaseNotes
    inputs.file     releaseNotesActual
}
// ############################################################################

// ############################################################################
// Kopieren der Artifakte in lokales Verzeichnis
def exe         = file("build/launch4j/${launch4j.outfile}")

task copyArtifacts(type: Copy, dependsOn: [ 'updateReleaseNotes', 'do_gitChangelogTask' ]) {
    from files( exe, changeLog, releaseNotes, documentation )
    into distributionFolder
}
configure(copyArtifacts) {
    group = TASKGROUP_JUPIDATOR
    description = 'Kopiert alle Artifakte ins Distributions-Verzeichnis'
    outputs.file    releaseNotes
    inputs.file     releaseNotesActual
}
// ############################################################################

// ############################################################################
// Jupidator
task updateJupidator << {
    def aJ = new Jupidator( jupidatorProps )
    def returnCode = aJ.process()
    if( aJ.process() != 0 ){
        throw new GradleException('Jupidator.process ging schief! ReturnCode = '+returnCode)
    }
}
configure(updateJupidator) {
    group = TASKGROUP_JUPIDATOR
    description = 'Jupidator-Dateien aktualisieren und so...'
    inputs.file releaseNotesActual
    outputs.file( new File(distributionFolderRoot, "${jupidatorProps.filename}") )
    outputs.dir distributionFolder
}
updateJupidator.dependsOn copyArtifacts
// ############################################################################

// ############################################################################
ssh.settings {
    dryRun = project.hasProperty('dryRun')
}

task setUserHome {
    doFirst {
        def homeEnvSet = System.getenv('HOME') 
        if(homeEnvSet) {
            System.setProperty("user.home", homeEnvSet )
            println( "System property user.home set to: "+ System.getProperty("user.home") )
        } 
        
    }
}

remotes {
    web01 {
        host = 'syniphos.i234.me'
        port = 5022
        user = 'kvk'
        identity = file("${projectDir}/misc/build-res/id_rsa.kvk@syniphos")
    }
}

task ssh_upload << {
    ssh.run {
        session( remotes.web01 ) {
            put from: "${distributionFolderRoot}/${jupidatorProps.filename}",
                into: "www/Download/${project.name}/${jupidatorProps.basename}-new.xml"
            put from: "${distributionFolder}",
                into: "www/Download/${project.name}"

        }
    }
}
configure(ssh_upload) {
    group = TASKGROUP_JUPIDATOR
    description = 'Dateien per SSH auf den Server laden'
    dependsOn updateJupidator, setUserHome
}

task ssh_release << {
    ssh.run {
        session( remotes.web01 ) {
            def source = "www/Download/${project.name}/${jupidatorProps.basename}-new.xml"
            def target = "www/Download/${project.name}/${jupidatorProps.filename}"
            def result = execute "mv $source $target"
//            println "Result = "+result
        }
    }
}

configure(ssh_release) {
    group = TASKGROUP_JUPIDATOR
    description = 'Projekt auf dem Server zum Download freigeben'
    dependsOn setUserHome
}
// ############################################################################

// ############################################################################
//'net.researchgate.release'
// Git MUSS im Pfad verfügbar sein!
// Am besten aus Kommando-Shell aufrufen mit 
//      gradlew :release -Prelease.useAutomaticVersion=true
// oder noch besser: �ber die Eclipse-Launch-Configuration: 
//                                  "Release - AutomaticVersion"
// Die Version wird in die Datei "gradle.properties" geschrieben.

release {
    failOnUnversionedFiles = true
    failOnCommitNeeded = true
    buildTasks = ['createExe']
    tagTemplate = '$name-$version'
    preTagCommitMessage = 'Neues Release: '
    newVersionCommitMessage = 'Vorbereitung für nächste Version: '
}
afterReleaseBuild.dependsOn ssh_upload
// ############################################################################

task printProps {
    doLast {
        println( "HOME                  = " + System.getenv('HOME' ) ) 
        println( "user.home             = " + System.getProperty("user.home") )
    }
}

task printProps.dependsOn( setUserHome )
